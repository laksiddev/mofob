//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    //[System.ServiceModel.ServiceContractAttribute(Namespace = "http://Microsoft.BizTalk.ESB/", ConfigurationName = "MOF.BizTalkESB.IProcessRequest")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://Microsoft.BizTalk.ESB/", ConfigurationName = "MOF.BizTalkESB.IProcessRequest", ProtectionLevel = System.Net.Security.ProtectionLevel.None)]
    internal interface IProcessRequest
    {
        
        // CODEGEN: Generating message contract since message SubmitRequest requires protection.
        [System.ServiceModel.OperationContractAttribute(Action="SubmitRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestResponse SubmitRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="SubmitRequest", ReplyAction="*")]
        System.IAsyncResult BeginSubmitRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest request, System.AsyncCallback callback, object asyncState);
        
        Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestResponse EndSubmitRequest(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.2152")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.biztalk.practices.esb.com/itinerary")]
    public partial class ItineraryDescription
    {
        
        private string nameField;
        
        private string versionField;
        
        private string guidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string Guid
        {
            get
            {
                return this.guidField;
            }
            set
            {
                this.guidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    //[System.ServiceModel.MessageContractAttribute(IsWrapped=false, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false, ProtectionLevel = System.Net.Security.ProtectionLevel.None)]
    internal partial class SubmitRequestRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.microsoft.biztalk.practices.esb.com/itinerary", ProtectionLevel=System.Net.Security.ProtectionLevel.None)]
        public Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription;
        
        //[System.ServiceModel.MessageBodyMemberAttribute(Namespace="", ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Order=0)]
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "", ProtectionLevel = System.Net.Security.ProtectionLevel.None, Order = 0)]
        public object part;
        
        public SubmitRequestRequest()
        {
        }
        
        public SubmitRequestRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription, object part)
        {
            this.ItineraryDescription = ItineraryDescription;
            this.part = part;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    //[System.ServiceModel.MessageContractAttribute(IsWrapped=false, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false, ProtectionLevel = System.Net.Security.ProtectionLevel.None)]
    internal partial class SubmitRequestResponse
    {
        
        public SubmitRequestResponse()
        {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal interface ProcessRequestChannel : Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal partial class ProcessRequestClient : System.ServiceModel.ClientBase<Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest>, Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest
    {
        
        private BeginOperationDelegate onBeginSubmitRequestDelegate;
        
        private EndOperationDelegate onEndSubmitRequestDelegate;
        
        private System.Threading.SendOrPostCallback onSubmitRequestCompletedDelegate;
        
        public ProcessRequestClient()
        {
        }
        
        public ProcessRequestClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public ProcessRequestClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ProcessRequestClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ProcessRequestClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubmitRequestCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestResponse Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest.SubmitRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest request)
        {
            return base.Channel.SubmitRequest(request);
        }
        
        public void SubmitRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription, object part)
        {
            Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest inValue = new Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest();
            inValue.ItineraryDescription = ItineraryDescription;
            inValue.part = part;
            Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestResponse retVal = ((Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest)(this)).SubmitRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest.BeginSubmitRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSubmitRequest(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubmitRequest(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription, object part, System.AsyncCallback callback, object asyncState)
        {
            Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest inValue = new Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestRequest();
            inValue.ItineraryDescription = ItineraryDescription;
            inValue.part = part;
            return ((Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest)(this)).BeginSubmitRequest(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestResponse Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest.EndSubmitRequest(System.IAsyncResult result)
        {
            return base.Channel.EndSubmitRequest(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSubmitRequest(System.IAsyncResult result)
        {
            Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.SubmitRequestResponse retVal = ((Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.IProcessRequest)(this)).EndSubmitRequest(result);
        }
        
        private System.IAsyncResult OnBeginSubmitRequest(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription = ((Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription)(inValues[0]));
            object part = ((object)(inValues[1]));
            return this.BeginSubmitRequest(ItineraryDescription, part, callback, asyncState);
        }
        
        private object[] OnEndSubmitRequest(System.IAsyncResult result)
        {
            this.EndSubmitRequest(result);
            return null;
        }
        
        private void OnSubmitRequestCompleted(object state)
        {
            if ((this.SubmitRequestCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubmitRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubmitRequestAsync(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription, object part)
        {
            this.SubmitRequestAsync(ItineraryDescription, part, null);
        }
        
        public void SubmitRequestAsync(Open.MOF.BizTalk.Adapters.Proxy.ItineraryOneWayServiceInstance.ItineraryDescription ItineraryDescription, object part, object userState)
        {
            if ((this.onBeginSubmitRequestDelegate == null))
            {
                this.onBeginSubmitRequestDelegate = new BeginOperationDelegate(this.OnBeginSubmitRequest);
            }
            if ((this.onEndSubmitRequestDelegate == null))
            {
                this.onEndSubmitRequestDelegate = new EndOperationDelegate(this.OnEndSubmitRequest);
            }
            if ((this.onSubmitRequestCompletedDelegate == null))
            {
                this.onSubmitRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubmitRequestCompleted);
            }
            base.InvokeAsync(this.onBeginSubmitRequestDelegate, new object[] {
                        ItineraryDescription,
                        part}, this.onEndSubmitRequestDelegate, this.onSubmitRequestCompletedDelegate, userState);
        }
    }
}
